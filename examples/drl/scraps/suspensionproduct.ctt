
module suspensionproduct where

import prelude
import equiv

STUCK : Unit = ?
NOTSTUCK : Unit = tt

-- ----------------------------------------------------------------------
-- library


comp_inv_r (A : U) (a0 : A) : (a1 : A) (p : Id A a0 a1)
          -> Id (Id A a0 a0) (<y> comp A (p @ y) [ (y = 1) -> <y> p @ -y ])
                             (<_> a0) = 
   J A a0 (\ (a1 : A) (p : Id A a0 a1) ->
             Id (Id A a0 a0) (<y> comp A (p @ y) [ (y = 1) -> <y> p @ -y ]) (<_> a0))
          (<_> <_> a0)

comp_inv_r2 (A : U) (a0 : A) : (a1 : A) (p : Id A a0 a1)
          -> Id (Id A a1 a1) (<y> comp A a0 [ (y = 0) -> p, (y = 1) -> <y> p @ y ])
                             (<_> a1) = 
   J A a0 (\ (a1 : A) (p : Id A a0 a1) ->
             Id (Id A a1 a1) (<y> comp A a0 [ (y = 0) -> p, (y = 1) -> <y> p @ y ]) (<_> a1))
          (<_> <_> a0)


-- ----------------------------------------------------------------------
-- pointed types

PointedType : U = (A : U) * A

Omega (A : PointedType) : PointedType = (Id A.1 A.2 A.2 , <_> A.2)

PointedMap (A : PointedType) (B : PointedType) : U = 
   (f : A.1 -> B.1) * (Id (B.1) (f A.2) B.2)

OmegaF (A B : PointedType) (f : PointedMap A B) : PointedMap (Omega A) (Omega B) = 
       ((\ (p : (Omega A).1) -> <x> (comp B.1 (f.1 (p @ x)) [(x=1) -> f.2, (x=0) -> f.2])) ,
        comp_inv_r2 B.1 (f.1 A.2) B.2 f.2)

TimesP (A : PointedType) (B : PointedType) : PointedType = ((_ : A.1) * B.1, (A.2 , B.2))

-- ----------------------------------------------------------------------
-- suspension

data Susp (A : U) = north
                  | south
                  | merid (a:A) <i> [(i=0) -> north, (i=1) -> south]

SuspP (A : PointedType) : PointedType = (Susp A.1, north)

meridP (A : PointedType) : PointedMap A (Omega(SuspP A)) = 
  ((\ (a : A.1) -> <x> comp (Susp A.1) (merid{Susp A.1} a @ x) [(x = 1) -> <x> merid{Susp A.1} A.2 @ -x]),
   comp_inv_r (Susp A.1) north south (<x> merid{Susp A.1} A.2 @ x))

-- ----------------------------------------------------------------------
-- smash

data Smash (A : PointedType) (B : PointedType) = 
     spair (a : A.1) (b : B.1)
   | smash (a : A.1) (b : B.1) <x> [(x=0) -> spair a B.2,
                                    (x=1) -> spair A.2 b]

SmashP (A : PointedType) (B : PointedType) : PointedType = (Smash A B, spair A.2 B.2)

-- ----------------------------------------------------------------------
-- wedge 

data Wedge (A : PointedType) (B : PointedType) = 
     winl (a : A.1)
   | winr (b : B.1)
   | wglue <x> [(x=0) -> winl A.2,
                (x=1) -> winr B.2]

WedgeP (A : PointedType) (B : PointedType) : PointedType = (Wedge A B, winl A.2)

-- ----------------------------------------------------------------------
-- Σ(X×Y) ≃ ΣX ∨ ΣY ∨ Σ(X∧Y)

RHS (A : PointedType) (B : PointedType) : PointedType = WedgeP (WedgeP (SuspP A) (SuspP B)) (SuspP(SmashP A B))

{-
to (A : PointedType) (B : PointedType) : Susp ((_ : A.1) * B.1) -> (RHS A B).1 = split 
  north -> winl (winl north)
  south -> winl (winr south)
  merid ab @ x -> ?
-}

fromll (A : PointedType) (B : PointedType) : (SuspP A).1 -> (SuspP (TimesP A B)).1 = split
  north -> north
  south -> south
  merid a @ x -> merid {(SuspP (TimesP A B)).1} (a , B.2) @ x

fromlr (A : PointedType) (B : PointedType) : (SuspP B).1 -> (SuspP (TimesP A B)).1 = split
  north -> north
  south -> south
  merid b @ x -> merid {(SuspP (TimesP A B)).1} (A.2 , b) @ x

froml (A : PointedType) (B : PointedType) : (WedgeP (SuspP A) (SuspP B)).1 -> (SuspP (TimesP A B)).1 = split
  winl a -> fromll A B a
  winr b -> fromlr A B b
  wglue @ x -> north

fromrm (A : PointedType) (B : PointedType) : (SmashP A B).1 -> Id ((SuspP (TimesP A B)).1) north south = split
  spair a b -> <x> merid{((SuspP (TimesP A B)).1)}  (a,b) @ x
  smash a b @ x -> <y> sq STUCK @ x @ y where 
    sq : Unit -> Id (Id ((SuspP (TimesP A B)).1) north south)
                    (<x> merid{((SuspP (TimesP A B)).1)} (a,B.2) @ x)
                    (<x> merid{((SuspP (TimesP A B)).1)} (A.2,b) @ x) = split 
       tt -> ?

fromr (A : PointedType) (B : PointedType) : (SuspP (SmashP A B)).1 -> (SuspP (TimesP A B)).1 = split
  north -> north
  south -> south 
  merid ab @ x -> fromrm A B ab @ x

from (A : PointedType) (B : PointedType) : (RHS A B).1 -> (SuspP (TimesP A B)).1 = split
  winl a -> froml A B a
  winr b -> fromr A B b
  wglue @ x -> north

