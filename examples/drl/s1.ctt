module s1 where
  
import prelude
import pointedtypes

data S1 = base
        | loop <i> [(i=0) -> base, (i=1) -> base]

S1P : PointedType = (S1, base)

-- helpful abbreviations
OmegaS1 : U = Id S1 base base

compS1 (p : OmegaS1) (q : OmegaS1) : OmegaS1 = <x> comp S1 (p @ x) [(x=1) -> q]
loopS1 : OmegaS1 = <i> loop{S1} @ i
loopS1_2 : OmegaS1= compS1 loopS1 loopS1

-- "rotation by angle x"
-- adds loops

rotLoop : (a : S1) -> Id S1 a a = split
  base -> loopS1
  loop @ i -> constSquare S1 base loopS1 @ i

rot : S1 -> S1 -> S1 = split
  base -> (\ (y : S1) -> y)
  loop @ i -> (\ (y : S1) -> rotLoop y @ i)

rot_unit_r : (a : S1) -> Id S1 (rot a base) a = split
   base -> <_> base
   loop@x -> <_> loop{S1}@x

loopS1_3 : Id S1 base base = compS1 loopS1_2 loopS1
test23 : IdP (<s> Id S1 (loopS1_3 @ s) (loopS1_3 @ s)) loopS1_2 loopS1_2 = <x> <y> rot (loopS1_3 @ x) (loopS1_2 @ y)
test23_diag : Id S1 base base = <x> test23 @ x @ x

-- at this point we have an hspace, so we could use the general proof that rot x and (\ x -> rot x y) 
-- are equivalences.  however, it's simpler to inline the connectedness argument for this case

rotIsEquiv_loop : IdP (<x> IsEquiv S1 S1 (rot (loopS1 @ x))) (idfun_IsEquiv S1) (idfun_IsEquiv S1) = 
  <x> use_IsEquiv_level_het S1 S1 (\ (x : S1) -> x) (\ (x : S1) -> x) (<x> rot (loop{S1} @ x)) (idfun_IsEquiv S1) (idfun_IsEquiv S1) @ x 

rotIsEquiv : (a : S1) -> IsEquiv S1 S1 (rot a) = split
   base -> idfun_IsEquiv S1
   loop @ x -> rotIsEquiv_loop @ x

rotpath (x : S1) : Id U S1 S1 = uae S1 S1 (rot x) (rotIsEquiv x)

-- too slow if we allow this to reduce always
rotright_IsEquiv_base : Unit -> IsEquiv S1 S1 (\ (a : S1) -> rot a base) = split 
  tt -> transport (<x> IsEquiv S1 S1 (\ (a : S1) -> rot_unit_r a @ -x)) (idfun_IsEquiv S1)

rotright_IsEquiv : (b : S1) -> IsEquiv S1 S1 (\ (a : S1) -> rot a b) = split 
  base -> rotright_IsEquiv_base STUCK
  loop@x -> use_IsEquiv_level_het S1 S1 
            (\ (a : S1) -> rot a base) (\ (a : S1) -> rot a base)
            (<x> \ (a : S1) -> rot a (loop{S1} @ x))
            (rotright_IsEquiv_base STUCK)
            (rotright_IsEquiv_base STUCK) @ x 

rotpath_right (b : S1) : Id U S1 S1 = 
  uae S1 S1 (\ (x : S1) -> rot x b) (rotright_IsEquiv b)

-- evidence that a rotated by something is b
Rot (a : S1) (b : S1) : U = (c : S1) * IdP (rotpath c) a b

-- only uses the hspace axioms, so would work for the general hopf construction
Rot_level (a : S1) (b : S1) : Contractible (Rot a b) =
 transport (<x> Contractible (((c : S1) * equiv c STUCK @ -x))) (Singleton_level S1 (transport (<x> rotpath_right a @ -x) b))
 where
  equiv (c : S1) : Unit -> Id U (IdP (rotpath c) a b) (Id S1 (transport (<x> rotpath_right a @ -x) b) c) = split
   tt ->
    compU (IdP (rotpath c) a b)
          (Id S1 (transport (rotpath c) a) b)
          (Id S1 (transport (<x> rotpath_right a @ -x) b) c)
          (<x> hom_to_het_1_path S1 S1 (rotpath c) a b @ -x)
          (compU (Id S1 (rot c a) b) 
                 (Id S1 c (transport (<x> rotpath_right a @ -x) b))
                 (Id S1 (transport (<x> rotpath_right a @ -x) b) c)
                 (move_transport_right_path S1 S1 (rotpath_right a) c b) 
                 (inv_path S1 c (transport (<x> rotpath_right a @ -x) b)))

findRot (a : S1) (b : S1) : Rot a b = (Rot_level a b).1
anyRot (a : S1) (b : S1) (r : Rot a b) : Id (Rot a b) (findRot a b) r = (Rot_level a b).2 r

-- rot is commutative, but we don't use this fact below

rot_comm_square : (a : S1) -> IdP (<x> Id S1 (rot a (loop{S1}@x)) (rotLoop a @ x))
                                  (rot_unit_r a)
                                  (rot_unit_r a) = split
   base -> <x><y>loop{S1}@x
   loop@z -> <x> <y> (rotLoop (loop{S1}@z) @ x)

rot_comm (a : S1) : (b : S1) -> Id S1 (rot a b) (rot b a) = split
   base -> rot_unit_r a
   loop @ x -> rot_comm_square a @ x
